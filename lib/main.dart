// ignore_for_file: file_names, class_names, non_constant_identifier_names

//Project notes:
//User profile management:  a few rough edges remaining.
//Autogenerated user profile picture: need to get the username from live input as a value to use when running the autogenerator when registering.
//Main chat view: mainly styling changes and differentiating between participants, possibly colour-coded chats?
//Need a way to send realtime notifications and maintain one's login state.
//Allow one to view and search their chat history.
//Build out the forum view, essentially a modified chat view that uses a category key to load in any chat sessions for that category.
//Need a name... Buzztalk or Buzzchat? Don't want to run afoul of buzzfeed.

import "package:app02/Controllers/ThemeController.dart";
import "package:app02/Views/MainView.dart";
import "package:flutter/material.dart";

//Our app namespaces here:
import "./Views/LoginView.dart";
import "./Utils/AuthManager.dart";
import "./Views/LoadScreen.dart";

void main() async
{
  WidgetsFlutterBinding.ensureInitialized();
  final authManager = AuthManager();
  await authManager.initialiseSupabase();
  final isServerLive = await authManager.IsServerLive(const Duration(seconds:5));
  runApp(ChatApp(authManager: authManager, isServerLive: isServerLive));
}

//Entry point class for this app:
class ChatApp extends StatelessWidget 
{
  final bool isServerLive;
  final AuthManager authManager;
  const ChatApp({super.key, required this.authManager, required this.isServerLive});
  //Create a theme that can be used globally:
  static get darkTheme => ThemeData(
    brightness: Brightness.dark,
    colorScheme: ColorScheme.fromSeed(seedColor: const Color.fromARGB(255, 45, 20, 102), brightness: Brightness.dark)
  );
  static get lightTheme => ThemeData(
    brightness: Brightness.light,
    //use a seed colour value around a dark purple:
    colorScheme: ColorScheme.fromSeed(seedColor: const Color.fromARGB(255, 45, 20, 102), brightness: Brightness.light)
  );


  @override
  Widget build(BuildContext context) 
  {
    return  MaterialApp(
      title: "Chat",
      theme: ThemeController.currentTheme,
       home:  isServerLive ? 
       LoadScreen(authManager: authManager)
       :StreamBuilder(
              stream: authManager.tokenStream,
              builder: (context, snapshot) 
              {
                  if (snapshot.hasData) 
                  {
                    return MainView(authManager:authManager);
                  } 
                  else 
                  {
                    return LoginView(authManager:authManager);
                  }
              }
            )
          
       );
  }
}